---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Serge KOUAME: Site personnel',
	description = 'Site personnel dans lequel les acquis de formation et les acquis de l\'expérience de Serge KOUAME sont définis et démontrés en vue d\'une reconnaissance par un établissement d\'enseignement ou un employeur.',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="keyword" content="Serge, KOUAME,Serge KOUAME,Développeur,Développeur web,Développeur full stack,full stack,abidjan,côte d'ivoire,informatique,technologie de l'information,Site personnel,Acquis de formation,Acquis de l'expérience,Reconnaissance,Etablissement d'enseignement,Employeur,Définition des acquis,Démonstration des acquis, Formation professionnelle, Expérience professionnelle, Curriculum vitae, Reconnaissance des compétences, Validation des acquis, Reconnaissance académique, Reconnaissance professionnelle, Site de présentation, Portefeuille de compétences, Formation continue, Employabilité" />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/Portfolio/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<link rel="stylesheet" href="/Portfolio/plugins/magnific-popup/magnific-popup.css" />

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
